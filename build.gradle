buildscript {
    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'

def localProperties = new File('./dev.gradle')
localProperties.createNewFile()

apply from: 'dev.gradle'

// These properties can all be customized from dev.gradle
def mappingsChannel = project.hasProperty('mappings_channel') ? mappings_channel : 'official'
def mappingsVersion = project.hasProperty('mappings_version') ? mappings_version : minecraft_version

println "Using mappings: " + mappingsChannel + " / " + mappingsVersion

group = "com.alcatrazescapee.hexlands"
archivesBaseName = "hexlands-forge-${minecraft_version}"

// Use version from environment variable, if set
def envVersion = System.getenv('VERSION')
version = envVersion == null ? 'indev' : envVersion

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8 // Need this here so eclipse task generates correctly.

repositories {
    mavenCentral()
    mavenLocal()
	maven {
		// Blame
		url "https://nexus.resourcefulbees.com/repository/maven-public/"
	}
    flatDir {
        dirs 'libs'
    }
}

minecraft {
    mappings channel: mappingsChannel, version: mappingsVersion

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArg '-ea'

            mods {
                hexlands {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            args '--nogui'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            jvmArg '-ea'

            mods {
                hexlands {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    runtimeOnly fg.deobf("com.telepathicgrunt:Blame:${blame_version}")
    // runtimeOnly fg.deobf("libs:byg:1.3.2") // File: libs/byg-1.3.2.jar
    // runtimeOnly fg.deobf("libs:BiomesOPlenty-1.16.5:13.1.0.482") // File: libs/BiomesOPlenty-1.16.5-13.1.0.482.jar
    // runtimeOnly fg.deobf("libs:betterendforge-1.16.4:1.6.0") // File: libs/betterendforge-1.16.4-1.6.0.jar

    testImplementation 'org.quicktheories:quicktheories:0.26'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

test {
    useJUnitPlatform()
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'
}

// Puts the mod version into the jar for mods.toml to read from
jar {
    manifest {
        attributes ([
                "Implementation-Version": "${project.version}"
        ])
    }
}

curseforge {
    project {
        def envApiKey = System.getenv('CURSEFORGE_API_KEY')
        apiKey = envApiKey == null ? 'nope' : envApiKey

        id = '522216' // Hex Lands

        changelog = "[Release Notes ${version}](https://github.com/alcatrazEscapee/hexlands/releases/tag/v${version})"
        changelogType = "markdown"

        releaseType = 'release'
        addGameVersion "${minecraft_version}"
    }
}